import signal
import json
import html
from datetime import timedelta
import logging
import asyncio
import aiosqlite
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser
from telethon.errors import SessionPasswordNeededError
from aiogram import Bot

from backend.db.database import insert_mention

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("telegram_eye")
logger.setLevel(logging.INFO)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
if not logger.hasHandlers():
    handlers = [
        logging.FileHandler("telegram_module.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    for handler in handlers:
        handler.setFormatter(formatter)
        logger.addHandler(handler)

logger.debug("–õ–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def load_config():
    with open('telegram_eye_config.json', 'r') as f:
        return json.load(f)

class TelegramEye:
    def __init__(self, api_id, api_hash, phone, keywords, bot_token, approved_users, db_name='telegram_eye_msgs.db', session_file='MMIS-TGE.session'):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram-–∫–ª–∏–µ–Ω—Ç—É, –±–æ—Ç—É –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.session_file = session_file
        self.client = TelegramClient(self.session_file, api_id, api_hash, device_model="Intel Z690", system_version="Windows 10")
        self.db_name = db_name
        self.db = None
        self.keywords = keywords
        self.bot = Bot(token=bot_token)
        self.approved_users = approved_users
        self.shutdown_event = asyncio.Event()
        self._is_running = True

        logger.debug("–°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ TelegramEye.")

    def is_running(self) -> bool:
        return self._is_running

    async def connect_and_authorize(self):
        try:
            await self.client.connect()
            if not await self.client.is_user_authorized():
                logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...")
                await self.client.send_code_request(self.phone, force_sms=False)
                login_code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n> ")

                try:
                    await self.client.sign_in(self.phone, code=login_code)
                except SessionPasswordNeededError:
                    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA\n> ")
                    await self.client.sign_in(password=password)

                logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            else:
                logger.info("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}", exc_info=True)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    async def process_message(self, event):
        try:
            msg = event.message # –°—É—â–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            message_datetime = msg.date  # –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = event.raw_text or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ)
            if not any(keyword.lower() in message_text.lower() for keyword in self.keywords):
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            chat_id = msg.chat_id

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç:
            # –ï—Å–ª–∏ —É —á–∞—Ç–∞ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if msg.chat.username:
                chat_link = f"https://t.me/{msg.chat.username}"
            else:
                # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞.
                # chat_id –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏–º–µ–µ—Ç –≤–∏–¥ -100XXXXXXXXX, —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "-100"
                chat_id_str = str(chat_id)
                if chat_id_str.startswith("-100"):
                    chat_id_str = chat_id_str.replace("-100", "", 1)
                chat_link = f"https://t.me/c/{chat_id_str}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            message_id = msg.id
            message_link = f"https://t.me/c/{chat_id}/{message_id}"
            if str(chat_id).startswith("-100"):
                message_link = message_link.replace("-100", "", 1) # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            user_id = event.sender.id
            try:
                user_entity = await self.client.get_entity(msg.sender_id)
            except ValueError:
                user_entity = await self.client.get_entity(PeerUser(msg.sender_id))

            user_id = user_entity.id

            user_name = user_entity.username or "–Æ–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"  # –ü–æ–ª—É—á–∞–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            user_nick = f"{user_entity.first_name or ''} {user_entity.last_name or ''}".strip()  # –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –õ–æ–≥–≥–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            logger.info(f"[{message_datetime}] {user_nick} ({user_id} @{user_name}) –≤ —á–∞—Ç–µ {chat_link} ({chat_id}): {message_text}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É mentions (platform='telegram')
            await insert_mention(
                platform="telegram",
                mention_datetime=message_datetime.isoformat(),
                mention_link=message_link,
                source_id=str(chat_id),
                source_link=chat_link,
                user_id=str(user_id),
                user_name=user_name,
                user_nick=user_nick,
                mention_text=message_text
            )
            logger.info("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ–±—â—É—é –ë–î.")

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç
            await self.notify_bot(message_datetime, message_link, chat_link, user_id, user_name, user_nick, message_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async def save_message_to_db(self, message_datetime, message_link, chat_id, chat_link, user_id, user_name, user_nick, message_text):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            sqlite_insert_with_param = """
                INSERT INTO tg_mentions (message_datetime, message_link, chat_id, chat_link, user_id, user_name, user_nick, message_text)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?);
            """

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î
            data_tuple = (message_datetime, chat_id, chat_link, user_id, user_name, user_nick, message_link, message_text)
            await self.db.execute(sqlite_insert_with_param, data_tuple)
            await self.db.commit()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_nick} (@{user_name}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î: {e}", exc_info=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–±–æ—Ç
    async def notify_bot(self, message_datetime, message_link, chat_link, user_id, user_name, user_nick, message_text):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ UTC+3 (–ú–°–ö+0)
        msk_time = message_datetime + timedelta(hours=3)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_text = (
            f"‚û§ <b>–ù–æ–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Telegram</b>\n"
            f"‚åö <b>–í—Ä–µ–º—è:</b> {msk_time.strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)\n"
            f"‚õì <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:</b> <a href=\"{chat_link}\">{chat_link}</a>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <a href=\"{message_link}\">{message_link}</a>\n"
            f"üë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
            f"ü™™ <b>Username:</b> @{user_name if user_name else '–Ω–µ—Ç'}\n"
            f"üìõ <b>–ò–º—è:</b> {user_nick}\n"
            f"üí¨ <b>–¢–µ–∫—Å—Ç:</b> {html.escape(message_text)}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ approved_users
        for user in self.approved_users:
            try:
                await self.bot.send_message(chat_id=user, text=notification_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}", exc_info=True)

    def setup_signal_handler(self) -> None:
        loop = asyncio.get_running_loop()

        def sig_received_handler(signal_received):
            asyncio.create_task(self.shutdown(signal_received))

        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, lambda s=sig: sig_received_handler(s))

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã
    async def cleanup(self):
        logger.info("–ü—Ä–æ–±—É—é –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ...")
        self._is_running = False

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            if self.bot:
                await self.bot.session.close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞: {e}", exc_info=True)

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
        try:
            if self.client:
                await self.client.disconnect()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Telegram –∑–∞–∫—Ä—ã—Ç–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telegram: {e}", exc_info=True)

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î
        try:
            if self.db:
                await self.db.close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –ë–î: {e}", exc_info=True)

    async def shutdown(self, sig: signal.Signals) -> None:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig.name}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
        if self.client.is_connected():
            logger.info("–û—Ç–∫–ª—é—á–∞—é –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
            await self.client.disconnect()

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]
        logger.info(f"–û—Ç–º–µ–Ω—è—é {len(tasks)} –∑–∞–¥–∞—á...")
        for task in tasks:
            task.cancel()

        try:
            await asyncio.gather(*tasks, return_exceptions=True)
        except asyncio.CancelledError:
            logger.info("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")

        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_running_loop()
        loop.stop()

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    telegram_eye = None  # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        config = load_config()
        API_ID = config['api_id']
        API_HASH = config['api_hash']
        PHONE = config['phone']
        BOT_TOKEN = config['bot_token']
        APPROVED_USERS = config['approved_users']
        KEYWORDS = config['keywords']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        telegram_eye = TelegramEye(API_ID, API_HASH, PHONE, KEYWORDS, BOT_TOKEN, APPROVED_USERS)
        await telegram_eye.setup_database()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await telegram_eye.connect_and_authorize()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è) –∞–∫–∫–∞—É–Ω—Ç–∞

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @telegram_eye.client.on(events.NewMessage(chats=None))  # None = —Å–ª—É—à–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã
        async def new_message_listener(event):
            if telegram_eye.is_running:
                await telegram_eye.process_message(event)

        logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
        await telegram_eye.client.run_until_disconnected()

    except asyncio.CancelledError:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        if telegram_eye:
            await telegram_eye.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
